// Download utilities for generated applications
import JSZip from 'jszip';
import { saveAs } from 'file-saver';
import type { GeneratedApp } from './codeGenerator';

export async function downloadApp(app: GeneratedApp): Promise<void> {
  const zip = new JSZip();
  
  // Add all files to the zip
  Object.entries(app.files).forEach(([filename, content]) => {
    zip.file(filename, content);
  });
  
  // Add package.json
  zip.file('package.json', JSON.stringify(app.packageJson, null, 2));
  
  // Generate the zip file
  const blob = await zip.generateAsync({ type: 'blob' });
  
  // Download the file
  const filename = `${app.name.toLowerCase().replace(/\s+/g, '-')}-app.zip`;
  saveAs(blob, filename);
}

export function previewApp(app: GeneratedApp): void {
  // Create a new window/tab to preview the app
  const newWindow = window.open('', '_blank');
  
  if (newWindow) {
    // Write the main HTML file to the new window
    newWindow.document.write(app.files['index.html']);
    newWindow.document.close();
    
    // If there's a script file, add it dynamically
    if (app.files['script.js']) {
      const script = newWindow.document.createElement('script');
      script.textContent = app.files['script.js'];
      newWindow.document.head.appendChild(script);
    }
    
    if (app.files['planner.js']) {
      const script = newWindow.document.createElement('script');
      script.textContent = app.files['planner.js'];
      newWindow.document.head.appendChild(script);
    }
    
    if (app.files['medication.js']) {
      const script = newWindow.document.createElement('script');
      script.textContent = app.files['medication.js'];
      newWindow.document.head.appendChild(script);
    }
    
    if (app.files['app.js']) {
      const script = newWindow.document.createElement('script');
      script.textContent = app.files['app.js'];
      newWindow.document.head.appendChild(script);
    }
  } else {
    alert('Please allow popups to preview the generated app');
  }
}

export function generateDeploymentInstructions(app: GeneratedApp): string {
  return `
# Deployment Instructions for ${app.name}

## Option 1: Static File Hosting (Recommended)

### Netlify (Free)
1. Extract the downloaded ZIP file
2. Visit https://netlify.com
3. Drag and drop the extracted folder to Netlify's deploy area
4. Your app will be live with a custom URL

### Vercel (Free)
1. Extract the downloaded ZIP file
2. Install Vercel CLI: \`npm i -g vercel\`
3. Navigate to the extracted folder
4. Run \`vercel\` and follow the prompts

### GitHub Pages (Free)
1. Create a new GitHub repository
2. Upload all files from the ZIP
3. Go to Settings > Pages
4. Select "Deploy from a branch" and choose "main"

## Option 2: Local Development

### Python (Built-in)
\`\`\`bash
cd extracted-folder
python -m http.server 3000
\`\`\`
Visit: http://localhost:3000

### Node.js
\`\`\`bash
cd extracted-folder
npx serve .
\`\`\`

### PHP (if available)
\`\`\`bash
cd extracted-folder
php -S localhost:3000
\`\`\`

## Option 3: Cloud Hosting

### Firebase Hosting (Free)
1. Install Firebase CLI: \`npm install -g firebase-tools\`
2. Run \`firebase login\` and \`firebase init hosting\`
3. Copy files to the public folder
4. Run \`firebase deploy\`

### AWS S3 Static Website
1. Create an S3 bucket
2. Enable static website hosting
3. Upload all files
4. Set bucket policy for public read access

## Customization
- Edit HTML/CSS/JS files as needed
- All files are standard web technologies
- No build process required
- Works on any web server

Generated by VoiceAble ðŸš€
  `.trim();
}
